// ===================================================================
// üí¨ PROMPT TEMPLATES - M·∫™U L·ªúI NH·∫ÆC CHO GEMINI AI
// ===================================================================

const promptTemplates = {
    // ==================== MAIN CV ANALYSIS PROMPT ====================
    main_analysis: {
        name: "Comprehensive CV Analysis",
        description: "Ph√¢n t√≠ch to√†n di·ªán CV v·ªõi ƒë√°nh gi√° chi ti·∫øt",
        template: `
B·∫°n l√† m·ªôt chuy√™n gia tuy·ªÉn d·ª•ng AI v·ªõi 15 nƒÉm kinh nghi·ªám. H√£y ph√¢n t√≠ch v√† ƒë√°nh gi√° ƒë·ªô ph√π h·ª£p gi·ªØa CV ·ª©ng vi√™n v√† y√™u c·∫ßu c√¥ng vi·ªác m·ªôt c√°ch chi ti·∫øt v√† kh√°ch quan.

**üìã TH√îNG TIN C√îNG VI·ªÜC:**
- V·ªã tr√≠: {{job_title}}
- C√¥ng ty: {{company}}
- Ng√†nh: {{industry}}
- ƒê·ªãa ƒëi·ªÉm: {{location}}
- M·ª©c l∆∞∆°ng: {{salary_range}}
- Lo·∫°i h√¨nh: {{work_type}}
- Level: {{level}}

**üéØ Y√äU C·∫¶U C√îNG VI·ªÜC:**
- K·ªπ nƒÉng k·ªπ thu·∫≠t: {{technical_skills}}
- Kinh nghi·ªám: {{experience_requirement}}
- H·ªçc v·∫•n: {{education_requirement}}
- Ng√¥n ng·ªØ: {{language_requirement}}
- K·ªπ nƒÉng m·ªÅm: {{soft_skills}}

**üë§ TH√îNG TIN ·ª®NG VI√äN:**
- H·ªç t√™n: {{candidate_name}}
- Tu·ªïi: {{age}}
- ƒê·ªãa ƒëi·ªÉm: {{candidate_location}}
- H·ªçc v·∫•n: {{education_details}}
- Kinh nghi·ªám: {{experience_years}} nƒÉm
- V·ªã tr√≠ hi·ªán t·∫°i: {{current_position}}
- K·ªπ nƒÉng k·ªπ thu·∫≠t: {{candidate_skills}}
- Ch·ª©ng ch·ªâ: {{certifications}}
- Ng√¥n ng·ªØ: {{languages}}
- K·ªπ nƒÉng m·ªÅm: {{candidate_soft_skills}}
- D·ª± √°n n·ªïi b·∫≠t: {{projects_summary}}
- Th√†nh t·ª±u: {{achievements}}

**üîç Y√äU C·∫¶U ƒê√ÅNH GI√Å:**
H√£y ƒë√°nh gi√° theo 5 ti√™u ch√≠ ch√≠nh v·ªõi tr·ªçng s·ªë nh∆∞ sau:
1. **K·ªπ nƒÉng k·ªπ thu·∫≠t (35%)**: M·ª©c ƒë·ªô ph√π h·ª£p skills, frameworks, tools
2. **Kinh nghi·ªám (25%)**: S·ªë nƒÉm, v·ªã tr√≠, ng√†nh nghi·ªáp ph√π h·ª£p
3. **H·ªçc v·∫•n & Ch·ª©ng ch·ªâ (15%)**: B·∫±ng c·∫•p, chuy√™n ng√†nh, certifications
4. **D·ª± √°n & Portfolio (20%)**: ƒê·ªô ph√π h·ª£p, complexity, impact
5. **K·ªπ nƒÉng m·ªÅm & Culture fit (5%)**: Communication, teamwork, adaptability

**üìä ƒê·ªäNH D·∫†NG ƒê·∫¶U RA:**
Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:

\`\`\`json
{
  "overall_score": <ƒëi·ªÉm t·ªïng t·ª´ 0-100>,
  "recommendation": "<HIGHLY_RECOMMENDED|RECOMMENDED|CONSIDER|NOT_RECOMMENDED>",
  "detailed_scores": {
    "technical_skills": <ƒëi·ªÉm t·ª´ 0-100>,
    "experience_relevance": <ƒëi·ªÉm t·ª´ 0-100>,
    "education_qualifications": <ƒëi·ªÉm t·ª´ 0-100>,
    "project_portfolio": <ƒëi·ªÉm t·ª´ 0-100>,
    "soft_skills_culture": <ƒëi·ªÉm t·ª´ 0-100>
  },
  "strengths": [
    "<ƒëi·ªÉm m·∫°nh c·ª• th·ªÉ 1>",
    "<ƒëi·ªÉm m·∫°nh c·ª• th·ªÉ 2>",
    "<ƒëi·ªÉm m·∫°nh c·ª• th·ªÉ 3>"
  ],
  "weaknesses": [
    "<ƒëi·ªÉm y·∫øu c·ª• th·ªÉ 1>",
    "<ƒëi·ªÉm y·∫øu c·ª• th·ªÉ 2>"
  ],
  "technical_assessment": {
    "matched_skills": ["<skill match 1>", "<skill match 2>"],
    "missing_skills": ["<missing skill 1>", "<missing skill 2>"],
    "additional_skills": ["<bonus skill 1>", "<bonus skill 2>"],
    "skill_level": "<Junior|Mid-level|Senior|Expert>"
  },
  "experience_analysis": {
    "years_match": "<ƒë√°nh gi√° s·ªë nƒÉm kinh nghi·ªám>",
    "position_relevance": "<ƒë√°nh gi√° ƒë·ªô ph√π h·ª£p v·ªã tr√≠>",
    "industry_fit": "<ƒë√°nh gi√° ph√π h·ª£p ng√†nh ngh·ªÅ>",
    "career_progression": "<ƒë√°nh gi√° s·ª± ph√°t tri·ªÉn s·ª± nghi·ªáp>"
  },
  "project_evaluation": [
    {
      "project_name": "<t√™n d·ª± √°n>",
      "relevance_score": <ƒëi·ªÉm t·ª´ 0-10>,
      "complexity_level": "<Low|Medium|High>",
      "business_impact": "<m√¥ t·∫£ impact>"
    }
  ],
  "improvement_suggestions": [
    "<ƒë·ªÅ xu·∫•t c·∫£i thi·ªán 1>",
    "<ƒë·ªÅ xu·∫•t c·∫£i thi·ªán 2>",
    "<ƒë·ªÅ xu·∫•t c·∫£i thi·ªán 3>"
  ],
  "interview_focus_areas": [
    "<khu v·ª±c c·∫ßn t·∫≠p trung ph·ªèng v·∫•n 1>",
    "<khu v·ª±c c·∫ßn t·∫≠p trung ph·ªèng v·∫•n 2>",
    "<khu v·ª±c c·∫ßn t·∫≠p trung ph·ªèng v·∫•n 3>"
  ],
  "salary_assessment": {
    "candidate_expectation": "{{salary_expectation}}",
    "job_offer_range": "{{salary_range}}",
    "market_comparison": "<so s√°nh v·ªõi th·ªã tr∆∞·ªùng>",
    "negotiation_strategy": "<chi·∫øn l∆∞·ª£c th∆∞∆°ng l∆∞·ª£ng>",
    "justification": "<l√Ω do cho m·ª©c l∆∞∆°ng>"
  },
  "cultural_fit_analysis": {
    "work_style_match": "<ƒë√°nh gi√° ph√π h·ª£p work style>",
    "team_dynamics": "<kh·∫£ nƒÉng h√≤a nh·∫≠p team>",
    "growth_potential": "<ti·ªÅm nƒÉng ph√°t tri·ªÉn>",
    "long_term_retention": "<kh·∫£ nƒÉng g·∫Øn b√≥ l√¢u d√†i>"
  },
  "next_steps": {
    "immediate_actions": ["<h√†nh ƒë·ªông ngay 1>", "<h√†nh ƒë·ªông ngay 2>"],
    "interview_type": "<Technical|Behavioral|Panel|Culture fit>",
    "timeline_recommendation": "<timeline ƒë·ªÅ xu·∫•t>",
    "additional_assessments": ["<ƒë√°nh gi√° b·ªï sung 1>", "<ƒë√°nh gi√° b·ªï sung 2>"]
  }
}
\`\`\`

**‚ö†Ô∏è L·ª¨U √ù:** 
- Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m markdown ho·∫∑c text gi·∫£i th√≠ch
- ƒê√°nh gi√° ph·∫£i kh√°ch quan, d·ª±a tr√™n facts
- Cung c·∫•p reasoning c·ª• th·ªÉ cho t·ª´ng ƒëi·ªÉm s·ªë
- Xem x√©t context c·ªßa ng√†nh v√† v·ªã tr√≠ khi ƒë√°nh gi√°
`,
        variables: [
            "job_title", "company", "industry", "location", "salary_range", "work_type", "level",
            "technical_skills", "experience_requirement", "education_requirement", "language_requirement", "soft_skills",
            "candidate_name", "age", "candidate_location", "education_details", "experience_years", "current_position",
            "candidate_skills", "certifications", "languages", "candidate_soft_skills", "projects_summary", "achievements",
            "salary_expectation"
        ]
    },

    // ==================== QUICK SCREENING PROMPT ====================
    quick_screening: {
        name: "Quick CV Screening",
        description: "S√†ng l·ªçc nhanh CV v·ªõi ƒë√°nh gi√° c∆° b·∫£n",
        template: `
B·∫°n l√† HR specialist. H√£y s√†ng l·ªçc nhanh CV n√†y v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh c√≥ n√™n ti·∫øp t·ª•c xem x√©t ·ª©ng vi√™n hay kh√¥ng.

**C√¥ng vi·ªác:** {{job_title}} t·∫°i {{company}}
**Y√™u c·∫ßu ch√≠nh:**
- Skills: {{main_skills}}
- Kinh nghi·ªám: {{experience_requirement}}
- H·ªçc v·∫•n: {{education_requirement}}

**·ª®ng vi√™n:** {{candidate_name}}
- Kinh nghi·ªám: {{experience_years}} nƒÉm
- Skills: {{candidate_skills}}
- H·ªçc v·∫•n: {{education}}

Tr·∫£ v·ªÅ JSON:
\`\`\`json
{
  "pass_screening": <true/false>,
  "confidence_level": <High|Medium|Low>,
  "quick_score": <ƒëi·ªÉm t·ª´ 0-100>,
  "key_matches": ["<match 1>", "<match 2>"],
  "red_flags": ["<red flag 1>", "<red flag 2>"],
  "recommendation": "<PROCEED|REJECT|BORDERLINE>",
  "reasoning": "<l√Ω do ng·∫Øn g·ªçn>"
}
\`\`\`
`,
        variables: ["job_title", "company", "main_skills", "experience_requirement", "education_requirement", 
                   "candidate_name", "experience_years", "candidate_skills", "education"]
    },

    // ==================== BATCH COMPARISON PROMPT ====================
    batch_comparison: {
        name: "Batch CV Comparison",
        description: "So s√°nh nhi·ªÅu CV c√πng l√∫c cho m·ªôt v·ªã tr√≠",
        template: `
B·∫°n l√† senior recruiter. So s√°nh v√† x·∫øp h·∫°ng c√°c ·ª©ng vi√™n sau ƒë√¢y cho v·ªã tr√≠ {{job_title}}.

**Y√™u c·∫ßu c√¥ng vi·ªác:**
{{job_requirements}}

**Danh s√°ch ·ª©ng vi√™n:**
{{candidates_list}}

H√£y ƒë√°nh gi√° v√† x·∫øp h·∫°ng t·ª´ t·ªët nh·∫•t ƒë·∫øn k√©m nh·∫•t:

\`\`\`json
{
  "ranking": [
    {
      "candidate_name": "<t√™n>",
      "rank": 1,
      "score": <ƒëi·ªÉm>,
      "recommendation": "<HIGHLY_RECOMMENDED|RECOMMENDED|CONSIDER>",
      "key_strengths": ["<strength 1>", "<strength 2>"],
      "concerns": ["<concern 1>", "<concern 2>"]
    }
  ],
  "summary": {
    "total_candidates": <s·ªë l∆∞·ª£ng>,
    "highly_recommended": <s·ªë l∆∞·ª£ng>,
    "recommended": <s·ªë l∆∞·ª£ng>,
    "top_3_candidates": ["<name 1>", "<name 2>", "<name 3>"],
    "selection_criteria": "<ti√™u ch√≠ ch·ªçn l·ª±a ch√≠nh>"
  }
}
\`\`\`
`,
        variables: ["job_title", "job_requirements", "candidates_list"]
    },

    // ==================== SKILL GAP ANALYSIS PROMPT ====================
    skill_gap_analysis: {
        name: "Skill Gap Analysis",
        description: "Ph√¢n t√≠ch kho·∫£ng c√°ch k·ªπ nƒÉng chi ti·∫øt",
        template: `
B·∫°n l√† technical assessor. Ph√¢n t√≠ch chi ti·∫øt skill gaps gi·ªØa y√™u c·∫ßu c√¥ng vi·ªác v√† ·ª©ng vi√™n.

**Required Skills:** {{required_skills}}
**Candidate Skills:** {{candidate_skills}}
**Projects:** {{projects}}

Ph√¢n t√≠ch v√† tr·∫£ v·ªÅ:

\`\`\`json
{
  "skill_analysis": {
    "exact_matches": [
      {
        "skill": "<t√™n skill>",
        "proficiency_estimate": "<Beginner|Intermediate|Advanced|Expert>",
        "evidence": "<b·∫±ng ch·ª©ng t·ª´ CV>"
      }
    ],
    "partial_matches": [
      {
        "required_skill": "<skill y√™u c·∫ßu>",
        "candidate_skill": "<skill t∆∞∆°ng t·ª± c·ªßa ·ª©ng vi√™n>",
        "similarity_score": <0-100>,
        "transferability": "<Easy|Moderate|Difficult>"
      }
    ],
    "missing_skills": [
      {
        "skill": "<skill thi·∫øu>",
        "importance": "<Critical|Important|Nice-to-have>",
        "learning_difficulty": "<Easy|Moderate|Hard>",
        "alternatives": ["<alternative skill 1>", "<alternative skill 2>"]
      }
    ],
    "bonus_skills": [
      {
        "skill": "<skill b·ªï sung>",
        "value_add": "<m√¥ t·∫£ gi√° tr·ªã th√™m>",
        "relevance": <0-100>
      }
    ]
  },
  "gap_summary": {
    "total_required": <s·ªë skill y√™u c·∫ßu>,
    "matched": <s·ªë skill match>,
    "partially_matched": <s·ªë skill match m·ªôt ph·∫ßn>,
    "missing": <s·ªë skill thi·∫øu>,
    "match_percentage": <ph·∫ßn trƒÉm>,
    "readiness_level": "<Ready|Nearly Ready|Needs Training|Not Ready>",
    "training_timeline": "<th·ªùi gian ƒë√†o t·∫°o ∆∞·ªõc t√≠nh>"
  },
  "development_plan": [
    {
      "skill": "<skill c·∫ßn ph√°t tri·ªÉn>",
      "priority": "<High|Medium|Low>",
      "suggested_resources": ["<resource 1>", "<resource 2>"],
      "timeline": "<th·ªùi gian h·ªçc>",
      "assessment_method": "<c√°ch ƒë√°nh gi√°>"
    }
  ]
}
\`\`\`
`,
        variables: ["required_skills", "candidate_skills", "projects"]
    },

    // ==================== CULTURAL FIT ASSESSMENT ====================
    cultural_fit: {
        name: "Cultural Fit Assessment",
        description: "ƒê√°nh gi√° ƒë·ªô ph√π h·ª£p vƒÉn h√≥a c√¥ng ty",
        template: `
ƒê√°nh gi√° cultural fit c·ªßa ·ª©ng vi√™n v·ªõi vƒÉn h√≥a c√¥ng ty.

**Company Culture:** {{company_culture}}
**Values:** {{company_values}}
**Work Style:** {{work_style}}

**Candidate Info:**
- Background: {{candidate_background}}
- Work Preferences: {{work_preferences}}
- Achievements: {{achievements}}
- Soft Skills: {{soft_skills}}

\`\`\`json
{
  "cultural_fit": {
    "overall_fit_score": <0-100>,
    "fit_level": "<Excellent|Good|Average|Poor>",
    "value_alignment": [
      {
        "company_value": "<gi√° tr·ªã c√¥ng ty>",
        "candidate_alignment": <0-100>,
        "evidence": "<b·∫±ng ch·ª©ng t·ª´ CV>",
        "assessment": "<Strong|Moderate|Weak|Unknown>"
      }
    ],
    "work_style_match": {
      "collaboration": <0-100>,
      "independence": <0-100>,
      "innovation": <0-100>,
      "attention_to_detail": <0-100>,
      "leadership": <0-100>
    },
    "potential_challenges": [
      "<th√°ch th·ª©c ti·ªÅm nƒÉng 1>",
      "<th√°ch th·ª©c ti·ªÅm nƒÉng 2>"
    ],
    "integration_strategies": [
      "<chi·∫øn l∆∞·ª£c h√≤a nh·∫≠p 1>",
      "<chi·∫øn l∆∞·ª£c h√≤a nh·∫≠p 2>"
    ],
    "retention_probability": "<High|Medium|Low>",
    "onboarding_focus": ["<focus area 1>", "<focus area 2>"]
  }
}
\`\`\`
`,
        variables: ["company_culture", "company_values", "work_style", "candidate_background", 
                   "work_preferences", "achievements", "soft_skills"]
    },

    // ==================== SALARY NEGOTIATION ANALYSIS ====================
    salary_analysis: {
        name: "Salary Negotiation Analysis",
        description: "Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c l∆∞∆°ng",
        template: `
Ph√¢n t√≠ch th√¥ng tin l∆∞∆°ng b·ªïng ƒë·ªÉ ƒë∆∞a ra chi·∫øn l∆∞·ª£c th∆∞∆°ng l∆∞·ª£ng.

**Job Details:**
- Position: {{job_title}}
- Level: {{level}}
- Location: {{location}}
- Budget Range: {{salary_budget}}

**Candidate Profile:**
- Experience: {{experience_years}} years
- Current Salary: {{current_salary}}
- Expected Salary: {{expected_salary}}
- Skills Level: {{skills_assessment}}

\`\`\`json
{
  "salary_analysis": {
    "market_benchmark": {
      "position_average": "<m·ª©c l∆∞∆°ng trung b√¨nh>",
      "location_factor": <h·ªá s·ªë ƒë·ªãa ƒëi·ªÉm>,
      "experience_premium": <ph·ª• c·∫•p kinh nghi·ªám>,
      "skills_premium": <ph·ª• c·∫•p k·ªπ nƒÉng>
    },
    "candidate_evaluation": {
      "market_value": "<gi√° tr·ªã th·ªã tr∆∞·ªùng>",
      "internal_equity": "<so s√°nh n·ªôi b·ªô>",
      "negotiation_position": "<Strong|Moderate|Weak>",
      "risk_assessment": "<Low|Medium|High>"
    },
    "offer_strategy": {
      "recommended_offer": "<m·ª©c l∆∞∆°ng ƒë·ªÅ xu·∫•t>",
      "negotiation_room": "<kh√¥ng gian th∆∞∆°ng l∆∞·ª£ng>",
      "non_salary_benefits": ["<benefit 1>", "<benefit 2>"],
      "justification_points": ["<ƒëi·ªÉm bi·ªán minh 1>", "<ƒëi·ªÉm bi·ªán minh 2>"]
    },
    "scenarios": {
      "optimistic": {
        "offer": "<offer t√≠ch c·ª±c>",
        "acceptance_probability": "<x√°c su·∫•t ch·∫•p nh·∫≠n>",
        "reasoning": "<l√Ω do>"
      },
      "realistic": {
        "offer": "<offer th·ª±c t·∫ø>",
        "acceptance_probability": "<x√°c su·∫•t ch·∫•p nh·∫≠n>",
        "reasoning": "<l√Ω do>"
      },
      "conservative": {
        "offer": "<offer b·∫£o th·ªß>",
        "acceptance_probability": "<x√°c su·∫•t ch·∫•p nh·∫≠n>",
        "reasoning": "<l√Ω do>"
      }
    }
  }
}
\`\`\`
`,
        variables: ["job_title", "level", "location", "salary_budget", "experience_years", 
                   "current_salary", "expected_salary", "skills_assessment"]
    }
};

// ==================== PROMPT BUILDER UTILITY ====================
class PromptBuilder {
    static build(templateName, variables) {
        const template = promptTemplates[templateName];
        if (!template) {
            throw new Error(`Template ${templateName} not found`);
        }

        let prompt = template.template;
        
        // Replace variables in template
        Object.keys(variables).forEach(key => {
            const placeholder = new RegExp(`{{${key}}}`, 'g');
            prompt = prompt.replace(placeholder, variables[key]);
        });

        // Check for unreplaced variables
        const unreplacedVars = prompt.match(/{{[^}]+}}/g);
        if (unreplacedVars) {
            console.warn(`Unreplaced variables found: ${unreplacedVars.join(', ')}`);
        }

        return prompt;
    }

    static getTemplate(templateName) {
        return promptTemplates[templateName];
    }

    static listTemplates() {
        return Object.keys(promptTemplates).map(key => ({
            name: key,
            description: promptTemplates[key].description,
            variables: promptTemplates[key].variables
        }));
    }

    static validateVariables(templateName, variables) {
        const template = promptTemplates[templateName];
        if (!template) return { valid: false, error: 'Template not found' };

        const requiredVars = template.variables || [];
        const providedVars = Object.keys(variables);
        const missingVars = requiredVars.filter(v => !providedVars.includes(v));

        return {
            valid: missingVars.length === 0,
            missing_variables: missingVars,
            extra_variables: providedVars.filter(v => !requiredVars.includes(v))
        };
    }
}

// ==================== OUTPUT FORMAT SCHEMAS ====================
const outputSchemas = {
    main_analysis: {
        type: "object",
        required: ["overall_score", "recommendation", "detailed_scores", "strengths", "weaknesses"],
        properties: {
            overall_score: { type: "number", minimum: 0, maximum: 100 },
            recommendation: { 
                type: "string", 
                enum: ["HIGHLY_RECOMMENDED", "RECOMMENDED", "CONSIDER", "NOT_RECOMMENDED"] 
            },
            detailed_scores: {
                type: "object",
                properties: {
                    technical_skills: { type: "number", minimum: 0, maximum: 100 },
                    experience_relevance: { type: "number", minimum: 0, maximum: 100 },
                    education_qualifications: { type: "number", minimum: 0, maximum: 100 },
                    project_portfolio: { type: "number", minimum: 0, maximum: 100 },
                    soft_skills_culture: { type: "number", minimum: 0, maximum: 100 }
                }
            },
            strengths: { type: "array", items: { type: "string" } },
            weaknesses: { type: "array", items: { type: "string" } }
        }
    }
};

module.exports = {
    promptTemplates,
    PromptBuilder,
    outputSchemas
};
